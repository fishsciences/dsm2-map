?save
save("temp", file = "channels.RData")
df = load("channels.RData")
stats::runif(20)
View(temp)
x <- stats::runif(20)
y <- list(a = 1, b = TRUE, c = "oops")
x
y
save(x, y, file = "xy.RData")
load("xy.RData")
df = select(flowlines.final, long, lat, order, channel_nu)
library(dplyr)
save(df, file = "channels.RData")
df = select(flowlines.final, long, lat, order, channel_nu)
library(dplyr)
df = select(flowlines.final, long, lat, order, channel_nu)
View(df)
save(df, file = "channels.RData")
load("channels.RData")
head(df)
write.csv(df, "channels.csv", row.names = FALSE)
shiny::runApp()
install.packages("leaflet")
shiny::runApp()
library(devtools)
devtools::install_github("ShinyDash", "trestletech")
shiny::runApp()
install.packages("maps")
shiny::runApp()
library(rgdal)
library(leaflet)
?setView
?leaflet
(m <- leaflet() %>% addTiles())
m <- leaflet() %>%
addTiles() %>%
setView(lng = -121.77, lat = 38.14, zoom = 10)
leaflet() %>%
addTiles() %>%
setView(lng = -121.77, lat = 38.14, zoom = 10)
leaflet() %>%
addTiles() %>%
setView(lng = -121.77, lat = 38.14, zoom = 8)
leaflet() %>%
addTiles() %>%
setView(lng = -121.77, lat = 38.14, zoom = 8)
leaflet() %>%
addTiles() %>%
setView(lng = -121.77, lat = 38.14, zoom = 7)
leaflet() %>%
addTiles() %>%
setView(lng = -121.77, lat = 38.14, zoom = 7) %>%
addPolylines(data = flowlines, color = "blue", weight = 4)
leaflet() %>%
addTiles() %>%
setView(lng = -121.77, lat = 38.14, zoom = 8) %>%
addPolylines(data = flowlines, color = "blue", weight = 4)
?addPolylines
?showPopup
leaflet() %>%
addTiles() %>%
setView(lng = -121.77, lat = 38.14, zoom = 8) %>%
addPolylines(data = flowlines, color = "blue", weight = 4, popup = ~htmlEscape(id))
install.packages("htmltools")
library(htmltools)
leaflet() %>%
addTiles() %>%
setView(lng = -121.77, lat = 38.14, zoom = 8) %>%
addPolylines(data = flowlines, color = "blue", weight = 4, popup = ~htmlEscape(id))
leaflet() %>%
addTiles() %>%
setView(lng = -121.77, lat = 38.14, zoom = 8) %>%
addPolylines(data = flowlines, color = "blue", weight = 4, popup = ~htmlEscape(channel_nu, len))
leaflet() %>%
addTiles() %>%
setView(lng = -121.77, lat = 38.14, zoom = 8) %>%
addPolylines(data = flowlines, color = "blue", weight = 4, popup = ~channel_nu + len)
leaflet() %>%
addTiles() %>%
setView(lng = -121.77, lat = 38.14, zoom = 8) %>%
addPolylines(data = flowlines, color = "blue", weight = 4, popup = ~channel_nu)
leaflet() %>%
addTiles() %>%
setView(lng = -121.77, lat = 38.14, zoom = 8) %>%
addPolylines(data = flowlines, color = "blue", weight = 4, popup = ~id)
leaflet() %>%
addTiles() %>%
setView(lng = -121.77, lat = 38.14, zoom = 8) %>%
addPolylines(data = flowlines, color = "blue", weight = 4, popup = ~len)
library(rgdal)
library(ggplot2)
library(plyr)
library(dplyr)
library(htmltools)
?readOGR
flowlines = readOGR(dsn="Flowlines.shp")
flowlines = readOGR(dsn=".", layer="Flowlines")
flowlines = readOGR(dsn="Flowlines.shp", layer="Flowlines")
flowlines = readOGR(dsn=".", layer="Flowlines")
flowlines = readOGR(dsn="Flowlines.shp", layer="Flowlines")
flowlines = readOGR(dsn=".", layer="Flowlines")
flowlines = readOGR(dsn=".", layer="Flowlines.shp")
flowlines = readOGR(dsn=".", layer="Flowlines")
flowlines = readOGR(dsn=".", layer="Flowlines")
flowlines@data$Channel = as.character(flowlines@data$channel_nu)
leaflet() %>%
addTiles() %>%
setView(lng = -121.77, lat = 38.14, zoom = 8) %>%
addPolylines(data = flowlines, color = "blue", weight = 4, popup = ~Channel)
library(rgdal)
library(ggplot2)
library(plyr)
library(dplyr)
library(htmltools)
leaflet() %>%
addTiles() %>%
setView(lng = -121.77, lat = 38.14, zoom = 8) %>%
addPolylines(data = flowlines, color = "blue", weight = 4, popup = ~Channel)
library(leaflet)
leaflet() %>%
addTiles() %>%
setView(lng = -121.77, lat = 38.14, zoom = 8) %>%
addPolylines(data = flowlines, color = "blue", weight = 4, popup = ~Channel)
leaflet() %>%
addTiles() %>%
setView(lng = -121.77, lat = 38.14, zoom = 8) %>%
addPolylines(data = flowlines, color = "blue", weight = 4)
flowlines@data$id = rownames(flowlines@data$id)
flowlines@data$id = rownames(flowlines@data)
leaflet() %>%
addTiles() %>%
setView(lng = -121.77, lat = 38.14, zoom = 8) %>%
addPolylines(data = flowlines, color = "blue", weight = 4)
plot(flowlines)
flowlines = readOGR(dsn="Flowlines.geojson", layer="OGRGeoJSON")
leaflet() %>%
addTiles() %>%
setView(lng = -121.77, lat = 38.14, zoom = 8) %>%
addPolylines(data = flowlines, color = "blue", weight = 4)
leaflet() %>%
addTiles() %>%
setView(lng = -121.77, lat = 38.14, zoom = 8) %>%
addPolylines(data = flowlines, color = "blue", weight = 4)
flowlines = readOGR(dsn=".", layer="FlowlinesLatLong")
leaflet() %>%
addTiles() %>%
setView(lng = -121.77, lat = 38.14, zoom = 8) %>%
addPolylines(data = flowlines, color = "blue", weight = 4)
flowlines@data$Channel = as.character(flowlines@data$channel_nu)
leaflet() %>%
addTiles() %>%
setView(lng = -121.77, lat = 38.14, zoom = 8) %>%
addPolylines(data = flowlines, color = "blue", weight = 4, popup = ~Channel)
flowlines@data$LengthKM = as.character(flowlines@data$km)
leaflet() %>%
addTiles() %>%
setView(lng = -121.77, lat = 38.14, zoom = 8) %>%
addPolylines(data = flowlines, color = "blue", weight = 4, popup = ~Channel + LengthKM)
leaflet() %>%
addTiles() %>%
setView(lng = -121.77, lat = 38.14, zoom = 8) %>%
addPolylines(data = flowlines, color = "blue", weight = 4, popup = ~htmlEscape(paste("Channel", channel_nu, "<br>",
"Length (km):", km)))
leaflet() %>%
addTiles() %>%
setView(lng = -121.77, lat = 38.14, zoom = 8) %>%
addPolylines(data = flowlines, color = "blue", weight = 4, popup = paste("Channel", channel_nu, "<br>",
"Length (km):", km))
leaflet() %>%
addTiles() %>%
setView(lng = -121.77, lat = 38.14, zoom = 8) %>%
addPolylines(data = flowlines, color = "blue", weight = 4, popup = ~paste("Channel", channel_nu, "<br>",
"Length (km):", km))
leaflet() %>%
addTiles() %>%
setView(lng = -121.77, lat = 38.14, zoom = 8) %>%
addPolylines(data = flowlines, color = "blue", weight = 4, popup = ~paste("Channel", channel_nu, "<br>",
"Length (km):", round(km, 1)))
shiny::runApp()
library(shiny)
library(leaflet)
library(rgdal)
shinyApp(
ui = fluidPage(leafletOutput('myMap')),
server = function(input, output) {
flowlines = readOGR(dsn=".", layer="FlowlinesLatLong")
map = leaflet() %>%
addTiles() %>%
setView(lng = -121.77, lat = 38.14, zoom = 7) %>%
addPolylines(data = flowlines, color = "blue", weight = 4, popup = ~paste("Channel", channel_nu, "<br>",
"Length (km):", round(km, 1)))
output$myMap = renderLeaflet(map)
}
)
shiny::runApp()
library(shinyapps)
deployApp()
shiny::runApp()
?addTiles
shiny::runApp()
?leaflet
shiny::runApp()
deployApp()
shiny::runApp()
deployApp()
?fluidPage
?renderLeaflet
shiny::runApp()
shiny::runApp()
deployApp()
deployApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
deployApp()
shiny::runApp()
plot(flowlines)
shiny::runApp()
shiny::runApp()
shiny::runApp()
?addPolylines
?addTiles
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
library(shinyapps)
deployApp()
deployApp()
shiny::runApp()
deployApp()
shiny::runApp()
deployApp()
shiny::runApp()
shiny::runApp()
library(shinyapps)
deployApp()
nodes = readOGR(dsn = "./shapefiles", layer = "NS_Delta_Chan_nodes.shp")
library(rgdal)
nodes = readOGR(dsn = "./shapefiles", layer = "NS_Delta_Chan_nodes.shp")
flowlines = readOGR(dsn = "./shapefiles", layer="FlowlinesLatLong")
nodes = readOGR(dsn = "./shapefiles", layer = "NS_Delta_Chan_nodes")
plot(nodes)
shiny::runApp()
?addCircles
shiny::runApp()
nodes = readOGR(dsn = "./shapefiles", layer = "NodesLatLong")
shiny::runApp()
shiny::runApp()
library(shinyapps)
deployApp()
shiny::runApp()
runApp()
library(shinyapps)
deployApp()
shiny::runApp()
runApp()
flowlines = readOGR(dsn = "./shapefiles", layer="FlowlinesLatLong")
flowlines@data$id = rownames(flowlines@data)
all.points = fortify(flowlines, channel_nu = "id")
all.df = plyr::join(all.points, flowlines@data, by = "id") %>%
mutate(chan.ord = paste(channel_nu, order, sep = "."))
# find approximate midpoint of channel
mid = all.df %>%
group_by(channel_nu) %>%
summarise(mid = round(median(order, na.rm = TRUE), 0)) %>%
mutate(chan.ord = paste(channel_nu, mid, sep = "."))
# nad = new all.df
nad = all.df %>%
filter(chan.ord %in% mid$chan.ord) %>%
select(long, lat, channel_nu)
write.csv(nad, "ChannelLatLong.csv", row.names = FALSE)
flowlines@data$id = rownames(flowlines@data)
all.points = ggplot2::fortify(flowlines, channel_nu = "id")
all.df = plyr::join(all.points, flowlines@data, by = "id") %>%
mutate(chan.ord = paste(channel_nu, order, sep = "."))
all.df = plyr::join(all.points, flowlines@data, by = "id") %>%
mutate(chan.ord = paste(channel_nu, order, sep = "."))
library(dplyr)
all.points = ggplot2::fortify(flowlines, channel_nu = "id")
all.df = plyr::join(all.points, flowlines@data, by = "id") %>%
mutate(chan.ord = paste(channel_nu, order, sep = "."))
# find approximate midpoint of channel
mid = all.df %>%
group_by(channel_nu) %>%
summarise(mid = round(median(order, na.rm = TRUE), 0)) %>%
mutate(chan.ord = paste(channel_nu, mid, sep = "."))
# nad = new all.df
nad = all.df %>%
filter(chan.ord %in% mid$chan.ord) %>%
select(long, lat, channel_nu)
write.csv(nad, "ChannelLatLong.csv", row.names = FALSE)
cll = read.csv("ChannelLatLong.csv")
head(cll)
runApp()
runApp()
runApp()
runApp()
runApp()
library(shinyapps)
deployApp()
library(shiny)
library(shinyapps)
deployApp()
shiny::runApp()
library(shinyapps)
deployApp()
shiny::runApp()
?addPolylines
library(rgdal)
library(leaflet)
library(dplyr)
shiny::runApp()
View(nodes@data)
head(nodes@data)
write.csv(select(nodes@data, node = nnum, x = X, y = Y), "NodeLatLong.csv", row.names = FALSE)
write.csv(select(nodes@data, node = NNUM, x = X, y = Y), "NodeLatLong.csv", row.names = FALSE)
shiny::runApp()
plot(flowlines)
plot(ibdpm)
plot(nodes)
runApp()
runApp()
runApp()
leaflet() %>%
addProviderTiles("Stamen.Terrain", group = "Map") %>%
addProviderTiles("MapQuestOpen.Aerial", group = "Aerial") %>%
setView(lng = -121.77, lat = 38.14, zoom = 10) %>%
addPolylines(data = flowlines,
color = "blue",
weight = 4,
group = "All DSM2 Channels",
layerId = ~channel_nu,
popup = ~paste("Channel", channel_nu, "<br>", "Length (km):", round(km, 1)))
leaflet() %>%
addProviderTiles("Stamen.Terrain", group = "Map") %>%
addProviderTiles("MapQuestOpen.Aerial", group = "Aerial") %>%
setView(lng = -121.77, lat = 38.14, zoom = 10) %>%
addPolylines(data = flowlines,
color = "blue",
weight = 4,
group = "All DSM2 Channels",
layerId = ~channel_nu,
popup = ~paste("Channel", channel_nu, "<br>", "Length (km):", round(km, 1))) %>%
addPolylines(data = ibdpm,
color = "darkred",
weight = 4,
group = "IB-DPM Channels",
layerId = ~channel_nu,
popup = ~paste("Channel", channel_nu, "<br>", "Length (km):", round(km, 1))) %>%
addCircles(data = nodes, color = "black", radius = 20, group = "DSM2 Nodes", popup = ~paste("Node", NNUM)) %>%
addLayersControl(
overlayGroups = c("All DSM2 Channels", "IB-DPM Channels", "DSM2 Nodes"),
baseGroups = c("Map", "Aerial"),
options = layersControlOptions(collapsed = FALSE)
)
runApp()
leaflet() %>%
addProviderTiles("Stamen.Terrain", group = "Map") %>%
addProviderTiles("MapQuestOpen.Aerial", group = "Aerial") %>%
setView(lng = -121.77, lat = 38.14, zoom = 10) %>%
addPolylines(data = flowlines,
color = "blue",
weight = 4,
group = "All DSM2 Channels",
layerId = ~channel_nu,
popup = ~paste("Channel", channel_nu, "<br>", "Length (km):", round(km, 1))) %>%
addPolylines(data = ibdpm,
color = "darkred",
weight = 4,
group = "IB-DPM Channels",
layerId = ~channel_nu,
popup = ~paste("Channel", channel_nu, "<br>", "Length (km):", round(km, 1))) %>%
addCircles(data = nodes, color = "black", radius = 20, group = "DSM2 Nodes", popup = ~paste("Node", NNUM)) %>%
addLayersControl(
overlayGroups = c("All DSM2 Channels", "IB-DPM Channels", "DSM2 Nodes"),
baseGroups = c("Map", "Aerial"),
options = layersControlOptions(collapsed = FALSE)
)
leaflet() %>%
addProviderTiles("Stamen.Terrain", group = "Map") %>%
addProviderTiles("MapQuestOpen.Aerial", group = "Aerial") %>%
setView(lng = -121.77, lat = 38.14, zoom = 10) %>%
addPolylines(data = flowlines,
color = "blue",
weight = 4,
# group = "All DSM2 Channels",
# layerId = ~channel_nu,
popup = ~paste("Channel", channel_nu, "<br>", "Length (km):", round(km, 1))) %>%
addPolylines(data = ibdpm,
color = "darkred",
weight = 4,
# group = "IB-DPM Channels",
# layerId = ~channel_nu,
popup = ~paste("Channel", channel_nu, "<br>", "Length (km):", round(km, 1))) %>%
addCircles(data = nodes, color = "black", radius = 20, group = "DSM2 Nodes", popup = ~paste("Node", NNUM))
install.packages("leaflet")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(rsconnect)
deployApp()
shiny::runApp()
runApp()
library(rsconnect)
deployApp(account = "fishsciences")
shiny::runApp()
runApp()
runApp()
runApp()
rsconnect::deployApp()
?addMarkers
runApp()
?icons
runApp()
runApp()
runApp()
?addMarker
?addMarkers
runApp()
runApp()
runApp()
rsconnect::deployApp()
?colorNumeric
runApp()
?addPolylines
runApp()
nodes@data %>% View()
runApp()
nll
head(nl)
head(nll)
nll = nodes@data %>% rename(lon = X, y = lat)
nll = nodes@data %>% rename(lon = X, lat = Y)
head(nll)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
rsconnect::deployApp()
shiny::runApp()
runApp()
runApp()
rsconnect::deployApp()
shiny::runApp()
rsconnect::deployApp()
install.packages("devtools")
install.packages("colourpicker")
shiny::runApp()
runApp()
runApp()
install.packages("rsconnect")
rsconnect::deployApp()
runApp()
runApp()
runApp()
runApp()
rsconnect::deployApp()
rsconnect::deployApp()
shiny::runApp()
runApp()
runApp()
?addCircles
runApp()
runApp()
rsconnect::deployApp()
channel_df = read_csv("ChannelInfo.csv")
channel_df = read.csv("ChannelInfo.csv")
channel_df
channel_df = read.csv("ChannelInfo.csv")
nodes = readOGR(dsn = "./shapefiles", layer = "NodesLatLong")
nll = nodes@data %>% rename(lon = X, lat = Y)
flowlines = readOGR(dsn = "./shapefiles", layer="FlowlinesLatLong")
cll = read.csv("ChannelLatLong.csv")
library(shiny)
library(shinyWidgets)
library(leaflet)
library(rgdal)
library(dplyr)
channel_df = read.csv("ChannelInfo.csv")
nodes = readOGR(dsn = "./shapefiles", layer = "NodesLatLong")
nll = nodes@data %>% rename(lon = X, lat = Y)
flowlines = readOGR(dsn = "./shapefiles", layer="FlowlinesLatLong")
cll = read.csv("ChannelLatLong.csv")
View(cll)
View(channel_df)
runApp()
shiny::runApp()
View(channel_df)
?subset
runApp()
?addCircles
runApp()
?renderText
runApp()
runApp()
rsconnect::deployApp()
